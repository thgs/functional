#+HEADER: `functional` package Documentation
-----

* Introduction

Drawing inspiration mainly from Haskell, this library is trying to replicate in
behaviour a lot of Haskell's functional structures.

This library is my own effort and journey into better understanding these
functional structures and explore their use in PHP. If you find any error,
theoretical or implementation related, do not hesitate to point it out.

* Contributing & Current design

The main idea driving the design is to have a public interface that is usable
and allows static analysis to infer types. Under the public interface it is
allowed to go to any length in design in order to satisfy the behaviour we are
targeting. Things from Haskell do not necessarily map directly to PHP due to
differences in capabilities offered. It is a fact we could re-implement the
entirety of Haskell in PHP in behaviour but judgement must be used to bring
things into perspective.

A second goal of this is to explore what is possible from the perspective of the
user trying to use functional programming concepts from code that is not written
in a functional programming style. Some effort can be seen with
~FunctorAdapter~. The belief is that although functional programming in general is
interesting and it has its benefits, if everything else is written in a
non-functional way how one can interface with it. The end goal is to be able to
express functionally and reuse other code in a functional programming way;
rather than switching paradigms.

There is a mapping of concepts from Haskell to PHP. For example, a function in
Haskell can be represented as a Composition in PHP when you want to compose with
it. There is some juggling with the different perspectives still and things do
not map 1-1 under all use-cases. Another example is implementing type classes
solely as interfaces for flexibility and simplicity but it could also be
abstract classes or some other form all together. Another example is that ~<-~
from Haskell is implemented as getValue() method call. It could be ~__invoke~ or
it could be a much more elaborate structure.

There is a mapping of concepts from Category Haskell to Category PHP and that is
opinionated, possibly the gravity is on composition at this point. A different
mapping is used from other libraries. This is what I assume is the design of
this library. For example `lamphpda` has different objects for each instance:
there are distinct implementations of MaybeFunctor, MaybeApplicative etc because
probably they map a Haskell type class instance into a single object, which
makes a lot of sense as PHP does not support the concept of type classes
natively.

* Usage
** Maybe
A Maybe tries to replicate Haskell's data type Maybe. As per
definition it can be `Nothing` or `Just x` where x is any value.

To construct a `Maybe a` value you can:

#+begin_src php

  $maybe = new Maybe(new Just(123));
  $anotherMaybe = new Maybe(new Nothing());

  $actualValue = $maybe->getValue(); // returns Just 123, so you can match the type
  $anotherActualvalue = $anotherMaybe->getValue();  // returns Nothing for the same reason

#+end_src

The object itself is a generic implementation but static analysis
should be able to infer types, ie for the above it should be able to
infer that it is Maybe<int>.

TODO: See if that can work like that or user needs to extend Maybe to
get consistency from static analysis. (getValue())

~Maybe~ implements ~Functor~ so you can apply a function to the underlying
value, taking into account the Maybe logic (it will apply only when it
is Just).

#+begin_src php

  $maybe = new Maybe(new Just(123));
  $maybeTimes34 = $maybe->fmap(fn ($x) => $x * 34);
  $result = $maybeTimes34->getValue();  // returns a Just(4182)

  $maybe = new Maybe(new Nothing());
  $maybeTimes34 = $maybe->fmap(fn ($x) => $x * 34);
  $result = $maybeTimes34->getValue(); // returns a Nothing

#+end_src

Apart from this, ~Maybe~ implements ~Show~ and ~Eq~.

** IO

~IO~ is a wrapper for some action that will perform some IO or otherwise have some
side-effect. The action must be provided in a callable. However, there is no
strict check whether the provided action actually performs some IO or has some
side-effect.

#+begin_src php

  $data = new IO(function () {
      print "Hello world";
      return time();
  });

  $result = $data->getValue(); // time() will run on the moment of this call

#+end_src

~IO~ implements ~Functor~ and can apply a function to the result of the IO operation.

#+begin_src php

  $data = new IO(function () {
      print "Hello world";
      return \time();
  });

  $data = $data->fmap( fn ($seconds) => (int) ($seconds / 60 / 60 / 24) );

  $result = $data->getValue(); // time() will run on this call (returns value in days)

#+end_src

** Either
** Composition
Composition is a structure to help you compose two functions. It is an
abstraction to be used instead of manually composing and implements Functor.

To compose a function you need to apply a new function to the composition
through the Functor interface (fmap).

Calling the function inside the Composition is as easy as:

#+begin_src php

  $composition = new Composition(min(...));
  $result = $composition([2, 3, 4]); // returns 2

#+end_src

Composing a function becomes:

#+begin_src php

  $composition->fmap(fn ($x) => $x % 2);
  $result = $composition([2, 3, 4]); // returns 0, effectively computing: min([2,3,4]) % 2 

#+end_src

The idea is that you can keep on applying functions into the composition.

TODO: Ergonomics here, could also implement a ~__call~ magic function ? Or ~pipe()~
so that the user can keep adding functions one after the other?

** Typeclasses

Currently type classes have been implemented as an interface.

*** Functor

TODO: Add main part for FunctorInterface

Utility traits are provided to help proove that your implementation satisfies
Functor laws.  Example usage:

#+begin_src php

  use FunctorProof;

  public function testIsAFunctor(): void
  {
      $this->assertInstanceIsFunctor(
          new Maybe(new Just(5)),
          fn (int $x): bool => $x == 5,
          fn (bool $x): string => $x == true ? '100' : '500'
      );
  }
#+end_src

The first argument of ~assertInstanceIsFunctor()~ expects to receive your object
that implements ~FunctorInterface~.

The second and third arguments are two possible functions to check whether your
functor implementation is indeed associative.

TODO: What happens when the functor is not associative - expand.

*** Applicative
*** Monad
* References and Reading material

** Blog Articles
[[https://www.haskellforall.com/2012/09/the-functor-design-pattern.html][Functor design pattern - HaskellForAll]]
** Books
[[https://learnyouahaskell.com][Learn You a Haskell for Great Good!]]

