#+TITLE: Project notes
-----

* Todo [4/17]
** TODO Fix IO
** TODO Fix Applicative sequence() types
** TODO Implement ReverseComposition or swap names
I think "Composition" became natural because of partial application.
** TODO Monoid
** TODO Curry?
** TODO List comprehension?
** TODO How we handle ~newtype~ ?
** TODO Consider single object per typeclass instance or why not
Lets take for example Maybe. Maybe has 1 type variable `a`. If Maybe
is implemented in a single class there might be a type `a` that cannot
be an instance of Show but is Functor for example. Implementing it in
a single class may be quite restrictive as the type variable `a` will
have to implement all requirements coming from the PHP interfaces
(that try to map a typeclass) ? Is this right?
** TODO (ergonomics) Refine Syntax helpers ?

Example for : x -: f = f x

#+begin_src php

  SyntaxHelper::start(3)
     ->apply(f(...));

      // or "stack" based

  StackSyntaxHelper::push(3)
      ->push(f(...))
      ->apply();

  StackSyntaxHelper::push(3, 4, 6)->apply('max');
  StackSyntaxHelper::push(3, 4, 6, 'max')->applyFirstCallable();

#+end_src

First two do not look much of a helper really.
** TODO Explore use cases
Haskell is good with constructing hexagons. What aspects of haskell do that? Are they included?
Just providing a base to work with the given structures (ie extending Maybe or reusing it)
The adapters
Implementations of the interfaces + test helpers for the laws

Write the above in the docs.
** TODO Make `fmap` accept ~F|callable~
Now it is ~fmap(Composition|callable $f, F $g): F~ But as the argument $g has to
be a functor, we can accept a callable if we wrap it in composition (that will
also apply partial).
** TODO Improve types in partial / composition
Also rethink and add any aliases/names. Partial might need an object instead of returning an anonymous function.
** TODO Some things can be implemented lazy
By returning a function and with the help of partial application.
** ----- DONE ----
** DONE Generalise the callable so that can pass Composition too
** DONE Partial function application depends on signatures.
** DONE How do we reflect types from Composition ?
I think this actually is easy to solve if we return the ReflectionFunction instance from Composition.
After handling the infinite loop.
** DONE Partial application
This seems such a central piece.
* Feedback
** Discord
adrian.2688 â€” i'd stick those utility methods into the associated
 classes, as static methods ditch functions.php

also when your traits refer to a method it expects the using class to
have, you should define that method on the trait as abstract more
broadly, as you work with this i'd suggest thinking more about how the
ideas could apply / be more "naturally" implemented in php, rather
than just trying to port them directly.  i don't do haskell, but some
of these concepts seem like they don't accomplish much as php tools

Crell â€” Functions are fine, but they does seem a bit over
 engineered. And Left/Right eithers s**k. ðŸ™‚ Explicit Result eithers
 are better DX.  I have my own composition centric library I've been
 using, and am now trying again to get into core.

https://github.com/Crell/fp
