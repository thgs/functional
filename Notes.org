#+TITLE: Project notes
-----

* Todo [1/10]
** TODO Monoid
** TODO Curry?
** TODO List comprehension?
** TODO How we handle ~newtype~ ?
** TODO Consider single object per typeclass instance or why not
** TODO (ergonomics) Refine Syntax helpers ?

Example for : x -: f = f x

#+begin_src php

  SyntaxHelper::start(3)
     ->apply(f(...));

      // or "stack" based

  StackSyntaxHelper::push(3)
      ->push(f(...))
      ->apply();

  StackSyntaxHelper::push(3, 4, 6)->apply('max');
  StackSyntaxHelper::push(3, 4, 6, 'max')->applyFirstCallable();

#+end_src

First two do not look much of a helper really.
** TODO Generalise the callable so that can pass Composition too
** TODO Partial function application depends on signatures.
** TODO How do we reflect types from Composition ?
** ----- DONE ----
** DONE Partial application
This seems such a central piece.
* Feedback
** Discord
adrian.2688 â€” i'd stick those utility methods into the associated
 classes, as static methods ditch functions.php

also when your traits refer to a method it expects the using class to
have, you should define that method on the trait as abstract more
broadly, as you work with this i'd suggest thinking more about how the
ideas could apply / be more "naturally" implemented in php, rather
than just trying to port them directly.  i don't do haskell, but some
of these concepts seem like they don't accomplish much as php tools

Crell â€” Functions are fine, but they does seem a bit over
 engineered. And Left/Right eithers s**k. ðŸ™‚ Explicit Result eithers
 are better DX.  I have my own composition centric library I've been
 using, and am now trying again to get into core.

https://github.com/Crell/fp
