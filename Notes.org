#+TITLE: Project notes
-----

* Todo [8/32]
** TODO Improve partial function
Write tests for the actual usage, see that it works passing one
argument at a time. Somewhere had to pass both at one call.
Would an object help rather than a closure for the types?

I think fixing partial in respect to the types will help a lot with
the static analysis errors.
** TODO Fix IO
** TODO Fix Applicative sequence() types
** TODO Implement ReverseComposition or swap names
I think "Composition" became natural because of partial application.
** TODO Semigroup and Monoid in terms of Semigroup
** TODO Curry?
** TODO List comprehension?
** TODO How we handle ~newtype~ ?
** TODO Consider single object per typeclass instance or why not
Lets take for example Maybe. Maybe has 1 type variable `a`. If Maybe
is implemented in a single class there might be a type `a` that cannot
be an instance of Show but is Functor for example. Implementing it in
a single class may be quite restrictive as the type variable `a` will
have to implement all requirements coming from the PHP interfaces
(that try to map a typeclass) ? Is this right?
** TODO (ergonomics) Refine Syntax helpers ?

Example for : x -: f = f x

#+begin_src php

  SyntaxHelper::start(3)
     ->apply(f(...));

      // or "stack" based

  StackSyntaxHelper::push(3)
      ->push(f(...))
      ->apply();

  StackSyntaxHelper::push(3, 4, 6)->apply('max');
  StackSyntaxHelper::push(3, 4, 6, 'max')->applyFirstCallable();

#+end_src

First two do not look much of a helper really.
** TODO Explore use cases
Haskell is good with constructing hexagons. What aspects of haskell do that? Are they included?
Just providing a base to work with the given structures (ie extending Maybe or reusing it)
The adapters
Implementations of the interfaces + test helpers for the laws

Write the above in the docs.
** TODO Improve types in partial / composition
Also rethink and add any aliases/names. Partial might need an object instead of returning an anonymous function.
** TODO Some things can be implemented lazy
By returning a function and with the help of partial application.
** TODO Implement these on Composition
#+begin_src haskell

-- | @since base-2.01
instance Applicative ((->) r) where
    pure = const
    (<*>) f g x = f x (g x)
    liftA2 q f g x = q (f x) (g x)

-- | @since base-2.01
instance Monad ((->) r) where
    f >>= k = \ r -> k (f r) r

#+end_src

** TODO Would mocking of functions be part of this?
Cheers to Olle from phpc
** TODO Could this be implemented:
fmap :: (a -> b) -> (f a -> f b)

So that we return a function and once that function is called with arg: f a then we call fmap on it?
I suppose so. Does it work now?

#+begin_src php

  function partialFmap(callable $f) {
      return partial (fmap(...), $f)
  }

#+end_src

Should be it.

** TODO Implement Category
** TODO Implement Op
** TODO Separate data and control functors
https://www.tweag.io/blog/2020-01-16-data-vs-control/

And also here we could elaborate on the Data.IO and Control.Monad.IO
so that the latter implements in terms of monadic operations. What
about the first though?
** TODO Implement MoreAccurateFunctor
https://stackoverflow.com/questions/53854853/why-is-there-a-distinction-between-co-and-contravariant-functors-in-haskell-but
Also called Categorical Functor but seems like this generalisation can be very useful.
https://hackage.haskell.org/package/categories-1.0.7/docs/Control-Categorical-Functor.html

** TODO Add missing law helpers for testing
** TODO Add tests & docs for Wrapper and clean up older tries
** TODO Definition Dependency diagram for composition & typeclasses
I think after looking around at typeclasses and different definitions
of composition, I need a diagram. Maybe it is actually a category!

Something like this https://wiki.haskell.org/index.php?title=Foldable_and_Traversable#What_do_these_classes_all_mean?_A_brief_tour:

** TODO Allow multiple functions composition
And inline them all in a single Closure rather than one on top of the
other. Would that be possible?
** ----- DONE ----
** DONE Change callable to \Closure
TimWolla and Edorian helped my understand that callable is scope
specific and how to benchmark a little better.

It makes sense to change all ~type declarations~ from ~callable~ to
~\Closure~ for performance reasons, even if it forces the user to use
~\Closure::fromCallable~ it probably is faster as that creates a more
performant \Closure.

There's more for performance but this is a little start.

** DONE Monoid
** DONE Make `fmap` accept ~F|callable~
Now it is ~fmap(Composition|callable $f, F $g): F~ But as the argument $g has to
be a functor, we can accept a callable if we wrap it in composition (that will
also apply partial).
** DONE Contravariant could be used for the wrappers
See https://stackoverflow.com/questions/38034077/what-is-a-contravariant-functor
specially https://stackoverflow.com/a/56150133

#+begin_src haskell

instance Contravariant (Op a) where
  contramap :: (b' -> b) -> (Op a b -> Op a b')
  contramap f g = Op (getOp g . f)

#+end_src

contramap :: (b -> a) -> f a -> f b

The (b -> a) in Contravariant defines the "medium", the way we are going to produce
something that can consume b out of something that was consuming a.

** DONE Generalise the callable so that can pass Composition too
** DONE Partial function application depends on signatures.
** DONE How do we reflect types from Composition ?
I think this actually is easy to solve if we return the ReflectionFunction instance from Composition.
After handling the infinite loop.
** DONE Partial application
This seems such a central piece.
* Other notes
** Trying the pipe operator
*** Try flipping ~__invoke~ with `fmap` or `bind` at will (some dynamic front object).
Or contramap once implemented, something along the lines of:

#+begin_src php

  cFlippedWithFmap ('abs') |> $maybeInt // 

#+end_src

Could then mean

#+begin_src php

  fmap ('abs', $maybeInt);

  // coming from calling `fmap()` in the $maybeInt object, cFlippedWithFmap would have to implement
  // that in its __invoke

#+end_src
*** Play with contramap and the pipe operator
** Random Insights
*** Implementing fmap with fmap function and a composition
When implementing fmap for an instance, we can always ~fmap()~ over a
~Composition~ to have a central place where we can control things like
partial application or other `utilities`. It is however slightly more
expensive as it wraps things again and again and does a few extra
calls.
** Random ideas
*** Is there a any tricky/hacky way to use variable variables?
Ie for creating something with "referential transparency"
See https://wiki.haskell.org/index.php?title=Referential_transparency

Or list comprehension? Some snippets that could be inspirational.

#+begin_src php

  $some = 123456;
  $var1 = $var2 = 'some';

  foreach (['var1', 'var2'] as $k => $outer)
      foreach (['new value', 'next value'] as $$outer)
          funcWithTwoArgs($var1, $var2);

  print "\n" . $var1;
  print "\n" . $var2;

#+end_src

#+begin_src php

  function funcWithTwoArgs($var1, $var2) {
      print_r ( compact('var1', 'var2') );
  }

  function listComp(iterable $variables, iterable $values) {
      foreach ($variables as $k => $outer)
          foreach ($values as $$outer)
              funcWithTwoArgs($var1, $var2);
  }

  listComp(['var1', 'var2'], ['one', 'two']);

#+end_src

*** Could avoid func(...) notation
Could avoid func(...) notation if every function (ie in ~Composition::__invoke~) we check
how many arguments we have been given and either return a function or call the function.
Isn't that essentially what we already do with ~partial~ ? Yes.. So this code:

#+begin_src php

  function f($a, $b) { return $a + $b };

  $f = c('f');
  $partiallyApplied = $f(); // does not need to be c('f')(...) because `partial` returns a function now
  $partiallyAppliedA = $f(123) // again partial returns a function but with one arg

#+end_src

* Feedback
** Discord
adrian.2688 â€” i'd stick those utility methods into the associated
 classes, as static methods ditch functions.php

also when your traits refer to a method it expects the using class to
have, you should define that method on the trait as abstract more
broadly, as you work with this i'd suggest thinking more about how the
ideas could apply / be more "naturally" implemented in php, rather
than just trying to port them directly.  i don't do haskell, but some
of these concepts seem like they don't accomplish much as php tools

Crell â€” Functions are fine, but they does seem a bit over
 engineered. And Left/Right eithers s**k. ðŸ™‚ Explicit Result eithers
 are better DX.  I have my own composition centric library I've been
 using, and am now trying again to get into core.

https://github.com/Crell/fp
